package Nested_classes.anonymous_class;


/*
* анонимный класс не имеет имени
* анонимный класс - это объявление класс и одновременное создание объекта;
* в анонимных классах нельзя написать конструктор
* анонимный класс может обращаться даже к private элементам внешнего класса
* лямбда выражение - это краткая форма для анонимных классов
* анонимных интерфейсов не существует
*
* */






/* пример
* некий класс имплементирует интерфейс
* Math и перезаписывает его методы
*
* */

public class Anonymous {
    private int x = 5;
    public static void main(String[] args) {
        // объект m типа math ссылается на некий анонимный класс,
        // который имплементирует интерфейс math и оверрайдит его методы
        Math m = new Math() {
            @Override
            public int doOperation(int a, int b) {
                Anonymous ac = new Anonymous();
                return a+b + ac.x;

            }

            int c = 10;
            void abc(){};
        }; // все что было выше - это один стэйтмент


        Math m2 = new Math() {
            @Override
            public int doOperation(int a, int b) {
                return a*b;
            }
        };

        System.out.println(m.doOperation(5, 7));
        System.out.println(m2.doOperation(5, 7));

    }

}


interface Math{

    int doOperation(int a, int b);

}

/*
* зачем это надо?
* если мы хотим оверрайдить метода класса или интерфейса,
* но не хотим создавать отдельный класс который будет их экстендить
* или имплементировать
* нам в дальнейшем он будет не нужен,
* то это способ выполнить на ходу перезапись методов
*
* то есть если мы хотим один раз на ходу перезаписать и использовать методы
*
*
* */
